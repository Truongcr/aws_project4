name: Backend CD

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/backend
    steps:
      - name: check out
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Display Python version
        run: python -c "import sys
      - name: Install pipenv
        run: sudo pip install pipenv
      - name: Install dependencies
        run: pipenv install
      - name: Run the tests
        run: pipenv run test

  build:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        shell: bash
        working-directory: ./starter/backend

    outputs:
      repo-image-name: ${{ steps.build-push-image.outputs.repo-image-name }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TOKEN }}
          aws-region: ${{ secrets.REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TOKEN }}
          aws-region: ${{ secrets.REGION }}

      - name: Update kubeconfig file
        env:
          REGION: ${{ secrets.REGION }}
          EKS_CLUSTER_NAME: cluster
        run: |
          aws sts get-caller-identity
          aws eks --region $REGION update-kubeconfig --name $EKS_CLUSTER_NAME
          kubectl config current-context

      - name: Login to Amazon ECR
        id: login-ecr-deploy
        uses: aws-actions/amazon-ecr-login@v2

      - name: Apply the manifests to the cluster
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ./starter/backend/k8s
          kustomize edit set image backend=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
